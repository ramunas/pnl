type lam
nametype v

fn lam : ([v]lam) => lam
fn var : v => lam
fn app : (lam,lam) => lam

fn subst : ([v]lam, lam) => lam

name x : v
name y : v

var `X : lam
var `Y : lam
var `Z - y : lam

rw subst([x]var(x),`X) ==> `X
rw subst([y]var(x),`X) ==> var(x)

rw subst([x]app(`Y, `Z), `X) ==>
    app(subst([x]`Y, `X), subst([x]`Z, `X))

rw subst([x]lam([y]`Y), `Z) ==>
    lam([y]subst([x]`Y, `Z))

# beta-rule
rw app(lam([x]`X), `Y) ==> subst([x]`X, `Y)

name z : v
rewrite subst([z]var(z), var(y))

normalize subst([z]var(z), var(y))
normalize subst([x]lam([y]var(x)), app(var(y), var(y)))
normalize subst([x]lam([y]var(x)), app(var(z), var(z)))

name a : v
name b : v
name c : v
normalize app(lam([x]var(x)),`X)

normalize app(lam([a]lam([b]app(var(a), var(b)))), lam([c]var(c)))
# rewrite app(lam([a]lam([b]app(var(a), var(b)))), lam([c]var(c)))

# name a : v
# name b < : v
# name c : v
# name d < : v
# unify `X == `(a b)X
# unify `X == `(a b)(c d)X
# unify `X == `Y
# unify `X == lam([x]`Y)
# var `T: lam
# unify lam([x]`T) == lam([y]`T)



# vim:ft=pnl:

